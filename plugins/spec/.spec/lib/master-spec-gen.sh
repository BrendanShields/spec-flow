#!/bin/bash
# Spec Master Spec Generator
# Aggregates all features into a master specification

set -euo pipefail

SPEC_LIB_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
SPEC_ROOT="$(cd "$SPEC_LIB_DIR/../.." && pwd)"

##
# Generate master specification from all features
#
# Usage: spec_generate_master_spec
#
spec_generate_master_spec() {
  local master_spec="$SPEC_ROOT/.spec/master-spec.md"
  local cache_dir="$SPEC_ROOT/.spec/cache/master-spec"
  local temp_spec="${master_spec}.tmp"

  mkdir -p "$cache_dir"

  echo "📝 Generating master specification..."

  # Check what needs regeneration
  local changed_features=()
  local features_dir="$SPEC_ROOT/features"

  if [[ -d "$features_dir" ]]; then
    for feature_dir in "$features_dir"/*/; do
      if [[ -d "$feature_dir" ]]; then
        local feature_id=$(basename "$feature_dir")
        local spec_file="$feature_dir/spec.md"
        local cache_file="$cache_dir/${feature_id}.md"

        if [[ -f "$spec_file" ]]; then
          if [[ "$spec_file" -nt "$cache_file" ]] || [[ ! -f "$cache_file" ]]; then
            # Feature changed, regenerate section
            _generate_feature_section "$feature_dir" > "$cache_file"
            changed_features+=("$feature_id")
          fi
        fi
      fi
    done
  fi

  if [[ ${#changed_features[@]} -eq 0 ]] && [[ -f "$master_spec" ]]; then
    echo "✅ Master spec up to date"
    return 0
  fi

  # Start generating master spec
  cat > "$temp_spec" <<EOF
# Spec Plugin - Master Specification

**Generated**: $(date '+%Y-%m-%d %H:%M:%S')
**Version**: $(cat "$SPEC_ROOT/.spec/config/version" 2>/dev/null || echo "3.1.0")
**Features**: $(_count_active_features) active, $(_count_completed_features) completed

---

EOF

  # Product Vision
  if [[ -f "$SPEC_ROOT/.spec/config/product-requirements.md" ]]; then
    cat >> "$temp_spec" <<EOF
## Product Vision

$(cat "$SPEC_ROOT/.spec/config/product-requirements.md")

---

EOF
  fi

  # Architecture
  if [[ -f "$SPEC_ROOT/.spec/config/architecture-blueprint.md" ]]; then
    cat >> "$temp_spec" <<EOF
## Architecture

$(cat "$SPEC_ROOT/.spec/config/architecture-blueprint.md")

---

EOF
  fi

  # Features
  cat >> "$temp_spec" <<EOF
## Features

EOF

  # Completed Features
  echo "### ✅ Completed Features" >> "$temp_spec"
  echo "" >> "$temp_spec"

  local has_completed=false
  for cache_file in "$cache_dir"/*.md; do
    if [[ -f "$cache_file" ]]; then
      local feature_id=$(basename "$cache_file" .md)
      if _is_feature_complete "$feature_id"; then
        cat "$cache_file" >> "$temp_spec"
        echo "" >> "$temp_spec"
        has_completed=true
      fi
    fi
  done

  if [[ "$has_completed" == "false" ]]; then
    echo "*No completed features yet*" >> "$temp_spec"
    echo "" >> "$temp_spec"
  fi

  # Active Features
  echo "### 🔄 Active Features" >> "$temp_spec"
  echo "" >> "$temp_spec"

  local has_active=false
  for cache_file in "$cache_dir"/*.md; do
    if [[ -f "$cache_file" ]]; then
      local feature_id=$(basename "$cache_file" .md")
      if _is_feature_active "$feature_id"; then
        cat "$cache_file" >> "$temp_spec"
        echo "" >> "$temp_spec"
        has_active=true
      fi
    fi
  done

  if [[ "$has_active" == "false" ]]; then
    echo "*No active features*" >> "$temp_spec"
    echo "" >> "$temp_spec"
  fi

  # Planned Features
  echo "### 📋 Planned Features" >> "$temp_spec"
  echo "" >> "$temp_spec"

  if [[ -f "$SPEC_ROOT/.spec-memory/CHANGES-PLANNED.md" ]]; then
    cat "$SPEC_ROOT/.spec-memory/CHANGES-PLANNED.md" >> "$temp_spec"
  else
    echo "*No planned features*" >> "$temp_spec"
  fi

  echo "" >> "$temp_spec"
  echo "---" >> "$temp_spec"
  echo "" >> "$temp_spec"

  # Technical Decisions
  cat >> "$temp_spec" <<EOF
## Technical Decisions

EOF

  if [[ -f "$SPEC_ROOT/.spec-memory/DECISIONS-LOG.md" ]]; then
    cat "$SPEC_ROOT/.spec-memory/DECISIONS-LOG.md" >> "$temp_spec"
  else
    echo "*No decisions logged yet*" >> "$temp_spec"
  fi

  echo "" >> "$temp_spec"
  echo "---" >> "$temp_spec"
  echo "" >> "$temp_spec"

  # Metrics
  cat >> "$temp_spec" <<EOF
## Metrics

EOF

  if [[ -f "$SPEC_ROOT/.spec-memory/WORKFLOW-PROGRESS.md" ]]; then
    cat "$SPEC_ROOT/.spec-memory/WORKFLOW-PROGRESS.md" >> "$temp_spec"
  else
    echo "*No metrics available yet*" >> "$temp_spec"
  fi

  # Footer
  cat >> "$temp_spec" <<EOF

---

*Auto-generated by Spec v$(cat "$SPEC_ROOT/.spec/config/version" 2>/dev/null || echo "3.1.0")*
*Do not edit manually - changes will be overwritten*
*Source files: see individual feature directories*
EOF

  # Atomic write
  mv "$temp_spec" "$master_spec"

  local line_count=$(wc -l < "$master_spec" | tr -d ' ')
  echo "✅ Master spec regenerated ($line_count lines, ${#changed_features[@]} features updated)"

  return 0
}

##
# Generate individual feature section (for caching)
#
_generate_feature_section() {
  local feature_dir=$1
  local feature_id=$(basename "$feature_dir")
  local spec_file="$feature_dir/spec.md"

  if [[ ! -f "$spec_file" ]]; then
    return 0
  fi

  # Get status from session.json if available
  local status="active"
  if [[ -f "$SPEC_ROOT/.spec-state/session.json" ]]; then
    status=$(jq -r ".features[]? | select(.id == \"$feature_id\") | .status // \"active\"" \
      "$SPEC_ROOT/.spec-state/session.json" 2>/dev/null || echo "active")
  fi

  echo "#### Feature $feature_id"
  echo "**Status**: $status"
  echo ""

  # Embed spec (strip first line to avoid duplicate header)
  tail -n +2 "$spec_file"

  echo ""
  echo "---"
  echo ""
}

##
# Check if feature is complete
#
_is_feature_complete() {
  local feature_id=$1

  if [[ -f "$SPEC_ROOT/.spec-state/session.json" ]]; then
    local status=$(jq -r ".features[]? | select(.id == \"$feature_id\") | .status // \"active\"" \
      "$SPEC_ROOT/.spec-state/session.json" 2>/dev/null || echo "active")

    [[ "$status" == "complete" ]] && return 0
  fi

  return 1
}

##
# Check if feature is active
#
_is_feature_active() {
  local feature_id=$1

  if [[ -f "$SPEC_ROOT/.spec-state/session.json" ]]; then
    local status=$(jq -r ".features[]? | select(.id == \"$feature_id\") | .status // \"active\"" \
      "$SPEC_ROOT/.spec-state/session.json" 2>/dev/null || echo "active")

    [[ "$status" == "active" ]] || [[ "$status" == "in-progress" ]] && return 0
  fi

  # Default: assume active if we have files for it
  local features_dir="$SPEC_ROOT/features/$feature_id"
  [[ -d "$features_dir" ]] && return 0

  return 1
}

##
# Count active features
#
_count_active_features() {
  local count=0

  if [[ -f "$SPEC_ROOT/.spec-state/session.json" ]]; then
    count=$(jq -r '[.features[]? | select(.status == "active" or .status == "in-progress")] | length' \
      "$SPEC_ROOT/.spec-state/session.json" 2>/dev/null || echo "0")
  fi

  echo "$count"
}

##
# Count completed features
#
_count_completed_features() {
  local count=0

  if [[ -f "$SPEC_ROOT/.spec-state/session.json" ]]; then
    count=$(jq -r '[.features[]? | select(.status == "complete")] | length' \
      "$SPEC_ROOT/.spec-state/session.json" 2>/dev/null || echo "0")
  fi

  echo "$count"
}

# Export function
export -f spec_generate_master_spec
