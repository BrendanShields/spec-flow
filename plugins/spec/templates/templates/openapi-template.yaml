openapi: 3.0.3
info:
  title: [PROJECT_NAME] API
  description: |
    API specification for [PROJECT_NAME].

    This file is the source of truth for all API contracts.
    Features creating APIs may update this file (with user approval).

    **Authentication**: [Describe auth method]
    **Base URL**: [e.g., https://api.example.com/v1]

    **Flat Artifact Model**: This is a peer document alongside other .spec/ artifacts.
    Features reference these contracts but aren't strictly bound to them.
  version: 1.0.0
  contact:
    name: [TEAM_NAME]
    email: [CONTACT_EMAIL]
  license:
    name: [LICENSE]
    url: [LICENSE_URL]

servers:
  - url: https://api.example.com/v1
    description: Production
  - url: https://staging-api.example.com/v1
    description: Staging
  - url: http://localhost:3000/v1
    description: Local development

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Users
    description: User management operations
  # Add more tags as modules are defined in .spec/architecture-blueprint.md

paths:
  # Authentication endpoints
  /auth/login:
    post:
      summary: Authenticate user
      description: Authenticate user with credentials and return JWT token
      tags:
        - Authentication
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Successfully authenticated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '429':
          description: Too many requests
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  # Add more endpoints as features are developed
  # spec:plan may propose new endpoints here (requires user approval)

components:
  schemas:
    # Request/Response schemas
    LoginRequest:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
          example: user@example.com
        password:
          type: string
          format: password
          minLength: 8
          example: "********"

    LoginResponse:
      type: object
      properties:
        accessToken:
          type: string
          description: JWT access token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        refreshToken:
          type: string
          description: JWT refresh token
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        expiresIn:
          type: integer
          description: Token expiry in seconds
          example: 900
        tokenType:
          type: string
          example: Bearer

    # Common schemas
    Error:
      type: object
      required:
        - error
      properties:
        error:
          type: object
          required:
            - code
            - message
          properties:
            code:
              type: string
              description: Error code
              example: INVALID_CREDENTIALS
            message:
              type: string
              description: Human-readable error message
              example: The provided credentials are invalid
            details:
              type: object
              description: Additional error details
              additionalProperties: true

    Pagination:
      type: object
      properties:
        nextCursor:
          type: string
          nullable: true
          description: Cursor for next page
          example: eyJpZCI6MTIzfQ==
        hasMore:
          type: boolean
          description: Whether more results exist
          example: true

    # Entity schemas (should align with .spec/data-models/entities.md)
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
          example: 550e8400-e29b-41d4-a716-446655440000
        email:
          type: string
          format: email
          example: user@example.com
        name:
          type: string
          example: John Doe
        createdAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"
        updatedAt:
          type: string
          format: date-time
          example: "2024-01-01T00:00:00Z"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token obtained from /auth/login

  responses:
    UnauthorizedError:
      description: Access token is missing or invalid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    NotFoundError:
      description: Resource not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    ValidationError:
      description: Request validation failed
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

    RateLimitError:
      description: Rate limit exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
      headers:
        X-RateLimit-Limit:
          schema:
            type: integer
          description: Request limit per window
        X-RateLimit-Remaining:
          schema:
            type: integer
          description: Remaining requests in current window
        X-RateLimit-Reset:
          schema:
            type: integer
          description: Unix timestamp when rate limit resets

security:
  - bearerAuth: []

# Notes:
# - This file may be updated by spec:plan when API changes are needed (requires user approval)
# - Keep schemas aligned with .spec/data-models/entities.md where possible
# - Follow API design guidelines from .spec/architecture-blueprint.md
# - Peer artifact in flat model - features can reference but not strictly enforced
