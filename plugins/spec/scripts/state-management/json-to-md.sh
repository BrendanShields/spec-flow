#!/bin/bash
# Convert JSON state files to human-readable Markdown
# Part of Spec v3.0 hybrid state management

set -euo pipefail

generate_session_md() {
    local json_file="${1:-.spec-state/session.json}"
    local output_file="${2:-.spec-state/current-session.md}"

    if [[ ! -f "$json_file" ]]; then
        echo "Error: $json_file not found" >&2
        return 1
    fi

    cat > "$output_file" << 'EOF'
# Spec Plugin Development Session

## Session Information
EOF

    # Session info
    jq -r '"- **Session ID**: \(.sessionId // "unknown")
- **Started**: \(.started // "unknown")
- **Type**: \(.type // "unknown")"' "$json_file" >> "$output_file"

    # Current context
    cat >> "$output_file" << 'EOF'

## Current Context

### Active Feature
EOF

    jq -r '.activeFeature | "**Feature**: \(.name // "none")
**Description**: \(.description // "")
**Priority**: \(.priority // "P1")
**Status**: \(.status // "unknown")

### Current Phase
**Phase**: \(.phase // "unknown")
**Started**: \(.startedAt // "unknown")
**Progress**: \(.progress // 0)%"' "$json_file" >> "$output_file"

    # Feature pipeline
    cat >> "$output_file" << 'EOF'

## Feature Pipeline

| Feature ID | Name | Priority | Status | Progress |
|------------|------|----------|--------|----------|
EOF

    jq -r '.features[]? | "| \(.id) | \(.name) | \(.priority // "P1") | \(.status) | \(.progress // 0)% |"' "$json_file" >> "$output_file"

    # Task progress
    cat >> "$output_file" << 'EOF'

## Task Progress

### Current Sprint
EOF

    jq -r '"**Total Tasks**: \(.tasks.total // 0)
**Completed**: \(.tasks.completed // 0)
**In Progress**: \(.tasks.inProgress // 0)
**Remaining**: \(.tasks.remaining // 0)"' "$json_file" >> "$output_file"

    # Environment
    cat >> "$output_file" << 'EOF'

## Environment
EOF

    jq -r '.environment | "- **Working Directory**: \(.workingDir // "unknown")
- **Git Branch**: \(.gitBranch // "unknown")
- **Plugin Version**: \(.version // "unknown")"' "$json_file" >> "$output_file"

    # Footer
    cat >> "$output_file" << 'EOF'

---

*Auto-generated by Spec v3.0. Do not edit manually.*
*Last updated: $(date '+%Y-%m-%d %H:%M:%S')*
EOF

    echo "âœ… Generated: $output_file"
}

generate_workflow_md() {
    local json_file="${1:-.spec-memory/workflow.json}"
    local output_file="${2:-.spec-memory/WORKFLOW-PROGRESS.md}"

    if [[ ! -f "$json_file" ]]; then
        echo "Error: $json_file not found" >&2
        return 1
    fi

    cat > "$output_file" << 'EOF'
# Spec Plugin Workflow Progress

EOF

    jq -r '"**Last Updated**: \(.lastUpdated // "unknown")
**Project Started**: \(.projectStarted // "unknown")
**Total Features**: \(.totalFeatures // 0)"' "$json_file" >> "$output_file"

    # Active features
    cat >> "$output_file" << 'EOF'

## Feature Progress Overview

### ðŸŽ¯ Active Features

| Feature | Phase | Progress | Started | ETA | Blocked |
|---------|-------|----------|---------|-----|---------|
EOF

    jq -r '.activeFeatures[]? | "| \(.name) | \(.phase) | \(.progress)% | \(.started) | \(.eta // "TBD") | \(.blocked // "No") |"' "$json_file" >> "$output_file"

    # Completed features
    cat >> "$output_file" << 'EOF'

### âœ… Completed Features

| Feature | Completed | Duration | Tasks | Velocity | Quality |
|---------|-----------|----------|-------|----------|---------|
EOF

    jq -r '.completedFeatures[]? | "| \(.name) | \(.completed) | \(.duration) | \(.tasks) | \(.velocity) | \(.quality) |"' "$json_file" >> "$output_file"

    # Metrics
    cat >> "$output_file" << 'EOF'

## Workflow Metrics

### Overall Statistics
EOF

    jq -r '.metrics | "- **Features Completed**: \(.featuresCompleted // 0)/\(.totalFeatures // 0)
- **Total Tasks Completed**: \(.tasksCompleted // 0)
- **Average Velocity**: \(.avgVelocity // "N/A")
- **Success Rate**: \(.successRate // "N/A")"' "$json_file" >> "$output_file"

    cat >> "$output_file" << 'EOF'

---

*Maintained by Spec Workflow System*
*Plugin Version: 3.0.0*
EOF

    echo "âœ… Generated: $output_file"
}

# Main execution
if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    case "${1:-session}" in
        session)
            generate_session_md "$@"
            ;;
        workflow)
            generate_workflow_md "$@"
            ;;
        all)
            generate_session_md
            generate_workflow_md
            ;;
        *)
            echo "Usage: $0 {session|workflow|all} [json_file] [output_file]"
            exit 1
            ;;
    esac
fi
